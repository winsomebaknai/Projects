# -*- coding: utf-8 -*-
"""Stock Market Prediction Tool - 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-kJ0B12IXQC-c0memldzwNdQMv6ciceo
"""

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from sklearn.linear_model import LinearRegression
from datetime import datetime
import time

#Fetch the real time data
def Fetch_data(ticker, interval = "1m", period = "1d"):
    print(f"fetching data for {ticker}....")
    try:
        data = yf.download(tickers=ticker, interval=interval, period=period)
        return data
    except Exception as e:
        print("Error fetching data", e)
        return pd.DataFrame()


#predict market movement
def predict_market_movement(data, n_future=5):
    model = LinearRegression()
    x = np.arange(len(data)).reshape(-1,1)
    y = data['Close'].values
    model.fit(x,y)

    future_x = np.arange(len(data), len(data) + n_future).reshape(-1,1)
    predictions = model.predict(future_x)
    return predictions

#visualization with line grapg
def live_plot(data, predictions, ticker):
    plt.style.use("ggplot")
    def update(frame):
        plt.clf()
        plt.plot(data.index, data['Close'], label = 'Actual Price', color = 'blue')
        future_time = pd.date_range(start=data.index[-1], periods=len(predictions) +1, freq = '1T')[1:]
        plt.plot(future_time, predictions,label = 'predicted price', linestyle = '--', color = 'red')
        plt.title(f"Live stock prediction of {ticker}")
        plt.xlabel('Time')
        plt.ylabel('price')
        plt.legend()
        plt.tight_layout()

        ani = FuncAnimation(plt.gcf(), update, interval=60000)
        plt.show()

#main function
def main():
    ticker = input("Enter the Stock Ticker").upper()
    try:
        iterations = int(input("Enter the number of iterations (or -1 for infinite): "))
        count = 0
        while iterations == -1 or count < iterations:
            data = Fetch_data(ticker)
            if not data.empty:
                predictions = predict_market_movement(data)
                live_plot(data, predictions, ticker)
            time.sleep(300)  # Wait 5 minutes before the next fetch
            count += 1
    except KeyboardInterrupt:
        print("\nExiting program. Goodbye!")
    except ValueError:
        print("Invalid input for iterations. Exiting.")
if __name__ == "__main__":
    main()